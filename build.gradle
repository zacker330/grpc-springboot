
buildscript {
    ext {
        springBootVersion = '1.5.9.RELEASE'
        grpcVersion = '1.10.0'
        sourceCompatibility = 1.8
    }
    repositories {
        maven {url 'http://maven.aliyun.com/nexus/content/groups/public/'}
//        mavenCentral()
//        jcenter()
        maven { url 'http://repo.spring.io/plugins-release' }
        maven { url "https://plugins.gradle.org/m2/"}
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.5"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.0.0"
        classpath 'com.palantir:jacoco-coverage:0.4.0'
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

group 'codes.showme.examples'
version '1.0-SNAPSHOT'

apply plugin: 'java'

allprojects{
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/milestone" }
    }
}


subprojects {

    apply plugin: 'java'
    apply plugin: 'jacoco'


    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    test {
        testLogging {
            exceptionFormat = 'full'
        }
    }


    dependencies{
//        compileOnly('org.projectlombok:lombok:1.16.20')
//        testCompileOnly('org.projectlombok:lombok:1.16.20')
        testCompile group: 'junit', name: 'junit', version: '4.12'

    }

}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    sourceSets project('grpc-springboot-server').sourceSets.main

    //subprojects.each {
    //sourceSets it.sourceSets.main
    //}

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

// 删除生成代码
task cleanProtoGen{
    doFirst{
        delete("$projectDir/src/main/protoGen")
    }
}
clean.dependsOn cleanProtoGen
